// JMSDKJSONKit Generated Model
// UPDATE LISCENSE HERE

import Foundation

public struct JMStaticMapping
{
    	{ SWITCH_CASE_STATIC_MAPPING }
}


public struct JMStaticTransformers
{
    	{ SWITCH_CASE_STATIC_TRANSFORMERS }
}


{ PROD_IMPORT }
public enum JMSDKMapperClassEnum: String {
	{ CASE_ENUM_DEFINITION }

	func createObject(data : Dictionary<String, AnyObject>) -> AnyObject? {
		switch self {
		{ SWITCH_CASE_ENUM_INSTANTIATE }
		case ._None:
			return nil
		}
	}

	var mapping : String? {
		switch self {
		{ SWITCH_CASE_MAPPING }
		case ._None:
			return nil
		}
	 }
}

public enum JMSDKTransformerEnum: String {
	{ CASE_TRANSAFORMER_ENUM_DEFINITION }
	case _None = "None"

	func transformer() -> JMTransformerProtocol? {
		switch self {
		{ CASE_TRANSAFORMER_ENUM_RETURN }
		case ._None:
			return nil
		}
	}
}

public class JMInstantiator : JMInstantiatorProtocol {
	static public let sharedInstance : JMInstantiator = JMInstantiator()

	public func newInstance(ofType classname : String, withValue data : Dictionary<String, AnyObject>) -> AnyObject? {
		return JMSDKMapperClassEnum(rawValue: classname)?.createObject(data : data)
	}

	static public func mappingFor(classType classname : String) -> String? {
        return JMSDKMapperClassEnum(rawValue: classname)?.mapping
  }

	public func transformerFromString(_ classString: String) -> JMTransformerProtocol? {
		return JMSDKTransformerEnum(rawValue: classString)!.transformer()
	}
}
