import Foundation
{ BASE_CLASS_LIBRARY_IMPORT }
{ TEST_IMPORT }
@objcMembers public class { CLASSNAME } : NSObject { BASE_CLASS } {
{ NONOPTIONALS }
{ OPTIONALS }

	required public { OVERRIDE } init({ REQUIRED_INIT_PARAMS })  {
{ REQUIRED_INIT_SETTERS }
            super.init()
	}

	convenience public init?(_ dictionary: Dictionary<String, AnyObject>)  {

		let dynamicTypeString = "\(type(of: self))"
		let className = dynamicTypeString.components(separatedBy: ".").last

		if let valuesDict = JSONModelKit.mapValues(from: dictionary,
												   forType: className!,
												   employing: JMInstantiator.sharedInstance,
												   defaultsEnabled : true)
		{{ FAILABLE_INIT_TEMP_NONOPTIONALS }

			self.init({ SELF_NONOPTIONALS_INIT })

			{ OPTIONALS_UNWRAP }
		} else {
			return nil
		}
	}

	public func updateWithDictionary(dictionary: Dictionary<String, AnyObject>) {

		let dynamicTypeString = "\(type(of: self))"
		let className = dynamicTypeString.components(separatedBy: ".").last

		if let valuesDict = JSONModelKit.mapValues(from: dictionary,
												   forType: className!,
												   employing: JMInstantiator.sharedInstance,
												   defaultsEnabled : false)
		{
			{ OPTIONALS_UNWRAP }
			{ NONOPTIONALS_UNWRAP }
 		}
	}
}

extension { CLASSNAME } {

	public override var debugDescription: String {

		var debug_string = "[{ CLASSNAME }]"

		{ DEBUG_DESCRIPTION_OPTIONALS }
		{ DEBUG_DESCRIPTION_NONOPTIONALS }
		debug_string += "\n"

		return debug_string
	}
}
